datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    username String @id

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    password    Password?
    collections Collection[]
}

model Password {
    hash String

    user     User   @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
    username String @unique
}

// model Note {
//     id    String @id @default(cuid())
//     title String
//     body  String

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     user   User @relation(fields: [username], references: [id], onDelete: Cascade, onUpdate: Cascade)
//     username Int
// }

model Category {
    name        String       @id
    collections Collection[]
}

model Collection {
    name        String
    slug        String
    description String
    // categoryId  Int
    // ownerId     Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    // schemes     ItemPropScheme[]

    user     User   @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
    username String

    Category Category @relation(fields: [category], references: [name], onDelete: Cascade, onUpdate: Cascade)
    category String

    schemes ItemPropScheme[]
    items   Item[]

    @@id([username, slug])
}

enum ItemPropType {
    Int
    LineText
    MultilineText
    Bool
    Date
}

model ItemPropScheme {
    id   Int          @id @default(autoincrement())
    name String
    type ItemPropType

    collection Collection @relation(fields: [username, slug], references: [username, slug], onDelete: Cascade)
    username   String
    slug       String

    items      Item[]
    properties ItemProp[]

    @@index([username, slug])
}

model Item {
    id   Int    @id @default(autoincrement())
    name String

    collection Collection @relation(fields: [username, slug], references: [username, slug], onDelete: Cascade)
    username   String
    slug       String

    schemes    ItemPropScheme[]
    properties ItemProp[]

    @@index([username, slug])
}

model ItemProp {
    value String

    item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId Int

    scheme   ItemPropScheme @relation(fields: [schemeId], references: [id], onDelete: Cascade)
    schemeId Int

    @@id([itemId, schemeId])
}
