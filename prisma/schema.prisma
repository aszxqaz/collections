datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator prismaClassGenerator {
    provider                 = "prisma-class-generator"
    output                   = "../app/generated/"
    dryRun                   = false
    useSwagger               = false
    makeIndexFile            = true
    useNonNullableAssertions = true
}

model User {
    username String @id

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    password    Password?
    collections Collection[]

    comments Comment[]
    items    Item[]
    rights   Rights?
}

model Rights {
    id        Int     @id @default(autoincrement())
    username  String  @unique
    isAdmin   Boolean @default(false)
    isBlocked Boolean @default(false)

    user User @relation(fields: [username], references: [username], onDelete: Cascade)
}

model Password {
    hash String

    user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
    username String @unique
}

// model Note {
//     id    String @id @default(cuid())
//     title String
//     body  String

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     user   User @relation(fields: [username], references: [id], onDelete: Cascade, onUpdate: Cascade)
//     username Int
// }

model Category {
    name        String       @id
    collections Collection[]
}

model Collection {
    name        String
    slug        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user     User   @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
    username String

    Category Category @relation(fields: [category], references: [name], onDelete: Cascade, onUpdate: Cascade)
    category String

    schemes Scheme[]
    items   Item[]

    @@id([username, slug])
}

enum PropertyType {
    Int
    Line
    Multiline
    Bool
    Date
}

model Scheme {
    id   Int          @id @default(autoincrement())
    name String
    type PropertyType

    collection Collection @relation(fields: [username, slug], references: [username, slug], onDelete: Cascade)
    username   String
    slug       String

    items      Item[]
    properties Property[]

    @@index([username, slug])
}

model Item {
    id        Int      @id @default(autoincrement())
    name      String
    slug      String
    createdAt DateTime @default(now())

    collection Collection @relation(fields: [username, collSlug], references: [username, slug], onDelete: Cascade)
    username   String
    collSlug   String

    schemes    Scheme[]
    properties Property[]
    tags       Tag[]
    likers     User[]
    comments   Comment[]

    @@unique([username, collSlug, slug])
    @@index([username, collSlug])
    @@index([createdAt])
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now())

    user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
    username String

    item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId Int

    @@index([itemId])
}

model Tag {
    name  String @id
    items Item[]
}

model Property {
    value String

    item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId Int

    scheme   Scheme @relation(fields: [schemeId], references: [id], onDelete: Cascade)
    schemeId Int

    @@id([itemId, schemeId])
}
